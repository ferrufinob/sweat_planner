Tables
users:
:name
:email
:password_digest *use securerandom
=>has_many :workouts

workouts:
:day_of_week
:target_area
:activity (make a large textbox)
:duration
:user_id
=>belongs_to :user

***FIRST***
- create tables and migrations
- create seeds file
- make models and associations

***SECOND***
- create validations
- cookies & enable sessions 
- session_secret -> use environment variable
- create users controller and workouts controller
- helper methods: redirect_if_not_logged_in?, logged_in?, current_user?

***THIRD***
- login
- signup
- login the user to their indiviual show page '/workouts' wont work do => '/users/:id' instead

***FOURTH**
-CREATE: new user can create account, existing user can create a new workout 
-READ: user can view all workouts or an indiviual workout / add a user show page-> this will link 
       to the specific users workouts and avoid them or others from seeing workouts that don't belong to them
-UPDATE: user can edit their workouts
-DESTROY: user is able to delete their workout
### make sure user can't read/edit/or detsroy another users workouts 


###FORMS###
>login
>signup
>new workout
>edit workout(override method = patch)
>>>delete goes on show page as a link(override method = delete)


*FINISHING TOUCHES

>>>>We only need password_digest to live on our database for bcrypt purposes<<<<
>>>.authenticate takes in the plain password from the user, looks at password_digest in our schema, 
    and compares the plain text password with the salted password. We are never storing plain text password 
    in our database but we are able to authenticate them.



Use Sinatra to build the app
 [x]Use ActiveRecord for storing information in a database
 [x]Include more than one model class (e.g. User, Post, Category)
 [x]Include at least one has_many relationship on your User model (e.g. User has_many Posts)
 [x]Include at least one belongs_to relationship on another model (e.g. Post belongs_to User)
 [x]Include user accounts with unique login attribute (username or email)
 []Ensure that the belongs_to resource has routes for Creating, Reading, Updating and Destroying
 [ ]Ensure that users can't modify content created by other users
 [ ]Include user input validations
 [ ]BONUS - not required - Display validation failures to user with error message (example form URL e.g. /posts/new)
 [ ]Your README.md includes a short description, install instructions, a contributors guide and a link to the license for your code


Confirm

 [ ]You have a large number of small Git commits
 [ ]Your commit messages are meaningful
 [ ]You made the changes in a commit that relate to the commit message
 [ ]You don't include changes in a commit that aren't related to the commit message


ADD THIS LATER 
#Users Show page
    #shows profile for the specific user
#     get "/users/:id" do
#         #! i am able to access other users pages by changing id in browser, how can i fix this?
#         if logged_in? && @user = User.find_by(id: params[:id])
#         erb :'users/index'
#        else
#         redirect to '/'
#         #If logged in and the current users session matches the user id, let hem view show page
#     end
# end
